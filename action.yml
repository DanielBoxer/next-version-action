name: "Get Next Version"
description: "Calculates the next semantic version based on git tags"

inputs:
  increment:
    description: "Which part of the version to increment (major, minor, patch)"
    required: true
    default: "patch"
  version:
    description: "Override version increment"
    required: false
  use_v_prefix:
    description: "Prefix the version with 'v'"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Check version input
      shell: bash
      run: |
        if [[ -n "${{ inputs.version }}" ]]; then
          if [[ "${{ inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Manually provided version: ${{ inputs.version }}"
            echo "new_version=${{ inputs.version }}" >> "$GITHUB_ENV"
          else
            echo "Invalid version format: ${{ inputs.version }}" >&2
            exit 1
          fi
        fi

    - name: Checkout repository
      if: ${{ env.new_version == '' }}
      uses: actions/checkout@v4
      # needed for finding tag
      with:
        fetch-depth: 0

    - name: Get latest tag
      if: ${{ env.new_version == '' }}
      id: previous_tag
      uses: "WyriHaximus/github-action-get-previous-tag@v1"

    - name: Set default version if no tags exist
      if: ${{ env.new_version == '' }}
      shell: bash
      run: |
        if [[ -z "${{ steps.previous_tag.outputs.tag }}" ]]; then
          echo "No previous tag found. Using default version: 0.1.0"
          echo "new_version=0.1.0" >> "$GITHUB_ENV"
        fi

    - name: Get next versions
      if: ${{ env.new_version == '' }}
      id: semvers
      uses: "WyriHaximus/github-action-next-semvers@v1"
      with:
        version: ${{ steps.previous_tag.outputs.tag }}

    - name: Set new version tag
      if: ${{ env.new_version == '' }}
      shell: bash
      env:
        INCREMENT: ${{ inputs.increment }}
        USE_V_PREFIX: ${{ inputs.use_v_prefix }}
      run: |
        if [[ "$INCREMENT" == "major" ]]; then
          new_version=${{ steps.semvers.outputs.major }}
        elif [[ "$INCREMENT" == "minor" ]]; then
          new_version=${{ steps.semvers.outputs.minor }}
        else
          new_version=${{ steps.semvers.outputs.patch }}
        fi

        USE_V_PREFIX="${USE_V_PREFIX,,}"
        if [[ "$USE_V_PREFIX" == "true" ]]; then
          new_version="v$new_version"
        fi

        echo "New version: $new_version"
        echo "new_version=$new_version" >> "$GITHUB_ENV"

    - name: Set output
      id: set_version
      shell: bash
      run: |
        echo "new_version=${{ env.new_version }}" >> "$GITHUB_OUTPUT"

outputs:
  new_version:
    description: "The new semantic version"
    value: ${{ steps.set_version.outputs.new_version }}
